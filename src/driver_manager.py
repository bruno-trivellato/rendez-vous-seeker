"""
Gerenciador do ChromeDriver com suporte a Mac ARM64 e anti-detec√ß√£o
"""
import platform
import os
import subprocess
import time
from typing import Optional
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from .config import config
from .utils import logger, anti_detection


class DriverManager:
    """Gerenciador do ChromeDriver com configura√ß√µes avan√ßadas"""
    
    def __init__(self):
        self.driver: Optional[webdriver.Chrome] = None
        self.driver_path: Optional[str] = None
    
    def setup_driver(self) -> webdriver.Chrome:
        """Configura e retorna uma inst√¢ncia do ChromeDriver"""
        try:
            chrome_options = self._create_chrome_options()
            service = self._create_chrome_service()
            
            logger.info("üöÄ Iniciando ChromeDriver...")
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # Configura timeouts
            self.driver.set_page_load_timeout(config.monitoring.timeout)
            self.driver.implicitly_wait(10)
            
            logger.info("‚úÖ ChromeDriver iniciado com sucesso")
            return self.driver
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar ChromeDriver: {e}")
            raise
    
    def _create_chrome_options(self) -> Options:
        """Cria op√ß√µes do Chrome com configura√ß√µes anti-detec√ß√£o"""
        options = Options()
        
        # Configura√ß√µes b√°sicas
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument(f"--window-size={config.chrome.window_size}")
        
        # User agent rotativo
        user_agent = anti_detection.get_next_user_agent()
        options.add_argument(f"--user-agent={user_agent}")
        
        # Desabilitar imagens para carregar mais r√°pido
        if config.chrome.disable_images:
            prefs = {"profile.managed_default_content_settings.images": 2}
            options.add_experimental_option("prefs", prefs)
        
        # Configura√ß√µes anti-detec√ß√£o
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # Headers adicionais
        for key, value in config.anti_detection.additional_headers.items():
            options.add_argument(f"--header={key}: {value}")
        
        # Configura√ß√µes de rede
        options.add_argument("--disable-web-security")
        options.add_argument("--allow-running-insecure-content")
        
        return options
    
    def _create_chrome_service(self) -> Service:
        """Cria servi√ßo do Chrome com suporte a Mac ARM64"""
        try:
            # Detecta se √© Mac ARM
            if platform.system() == "Darwin" and platform.machine() == "arm64":
                logger.info("üçé Detectado Mac ARM64 - Configurando ChromeDriver espec√≠fico...")
                return self._setup_mac_arm_driver()
            else:
                logger.info("üñ•Ô∏è  Sistema detectado - Usando ChromeDriver padr√£o...")
                return self._setup_standard_driver()
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar servi√ßo do Chrome: {e}")
            raise
    
    def _setup_mac_arm_driver(self) -> Service:
        """Configura ChromeDriver espec√≠fico para Mac ARM64"""
        try:
            # Limpa cache anterior se existir
            cache_path = os.path.expanduser("~/.wdm")
            if os.path.exists(cache_path):
                import shutil
                shutil.rmtree(cache_path)
                logger.info("üßπ Cache do webdriver-manager limpo")
            
            # Baixa o ChromeDriver
            driver_path = ChromeDriverManager().install()
            logger.info(f"‚úÖ ChromeDriver baixado: {driver_path}")
            
            # Corrige o caminho se necess√°rio
            if "THIRD_PARTY_NOTICES" in driver_path:
                correct_path = driver_path.replace("THIRD_PARTY_NOTICES.chromedriver", "chromedriver")
                logger.info(f"üîß Corrigindo caminho para: {correct_path}")
                driver_path = correct_path
            
            # Corrige permiss√µes
            self._fix_driver_permissions(driver_path)
            
            self.driver_path = driver_path
            return Service(driver_path)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar driver Mac ARM: {e}")
            raise
    
    def _setup_standard_driver(self) -> Service:
        """Configura ChromeDriver padr√£o para outros sistemas"""
        try:
            driver_path = ChromeDriverManager().install()
            logger.info(f"‚úÖ ChromeDriver baixado: {driver_path}")
            
            self.driver_path = driver_path
            return Service(driver_path)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao configurar driver padr√£o: {e}")
            raise
    
    def _fix_driver_permissions(self, driver_path: str):
        """Corrige permiss√µes do ChromeDriver"""
        try:
            # Verifica se o arquivo existe
            if not os.path.exists(driver_path):
                logger.error(f"‚ùå Arquivo do driver n√£o encontrado: {driver_path}")
                return
            
            # Verifica permiss√µes atuais
            stat = os.stat(driver_path)
            if not (stat.st_mode & 0o111):  # Se n√£o √© execut√°vel
                logger.info(f"üîß Corrigindo permiss√µes para: {driver_path}")
                
                # Tenta com chmod normal
                try:
                    subprocess.run(["chmod", "+x", driver_path], check=True)
                    logger.info("‚úÖ Permiss√µes corrigidas")
                except subprocess.CalledProcessError:
                    # Se falhar, tenta com sudo
                    logger.warning("‚ö†Ô∏è  Tentando corrigir permiss√µes com sudo...")
                    subprocess.run(["sudo", "chmod", "+x", driver_path], check=True)
                    logger.info("‚úÖ Permiss√µes corrigidas com sudo")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao corrigir permiss√µes: {e}")
    
    def rotate_session(self):
        """Rotaciona a sess√£o do driver (fecha e reabre)"""
        if self.driver:
            try:
                logger.info("üîÑ Rotacionando sess√£o do ChromeDriver...")
                self.driver.quit()
                time.sleep(2)  # Aguarda fechamento
                
                # Reseta contadores anti-detec√ß√£o
                anti_detection.reset_session()
                
                # Recria o driver
                self.setup_driver()
                logger.info("‚úÖ Sess√£o rotacionada com sucesso")
                
            except Exception as e:
                logger.error(f"‚ùå Erro ao rotacionar sess√£o: {e}")
    
    def quit(self):
        """Fecha o driver"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("üõë ChromeDriver fechado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao fechar ChromeDriver: {e}")
    
    def get_driver(self) -> Optional[webdriver.Chrome]:
        """Retorna a inst√¢ncia atual do driver"""
        return self.driver
    
    def is_healthy(self) -> bool:
        """Verifica se o driver est√° funcionando"""
        if not self.driver:
            return False
        
        try:
            # Tenta executar um comando simples
            self.driver.current_url
            return True
        except Exception:
            return False 