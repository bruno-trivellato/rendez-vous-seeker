"""
Main monitor for the Rendez-vous system
"""
import time
import signal
import sys
import pdb  # Python debugger
from enum import Enum
from typing import Tuple, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

from .config import config
from .utils import logger, anti_detection, time_utils, notification_utils
from .driver_manager import DriverManager
from .page_detector import page_detector, PageType


class MonitorState(Enum):
    """States of the monitoring process"""
    INITIAL = "initial"
    NAVIGATING = "navigating"
    CAPTCHA_WAIT = "captcha_wait"
    MONITORING = "monitoring"
    AVAILABLE = "available"


class RDVMonitor:
    """Main monitor to detect appointment availability"""
    
    def __init__(self):
        self.driver_manager = DriverManager()
        self.running = True
        self.check_count = 0
        self.start_time = time.time()
        self.state = MonitorState.MONITORING  # Start directly in monitoring state
        self.initial_page_url = config.monitoring.url
        

        
        # Configure signal handler to stop gracefully
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """Handler for Ctrl+C and SIGTERM"""
        logger.info("\n🛑 Stopping the monitor...")
        self.running = False
        self.driver_manager.quit()
        sys.exit(0)
    
    def start(self):
        """Starts the monitoring"""
        try:
            logger.info("🚀 Starting Rendez-vous monitor...")
            logger.info(f"📍 URL: {config.monitoring.url}")
            logger.info(f"⏱️  Base interval: {config.monitoring.base_interval} seconds")
            logger.info(f"🎯 Anti-detection: {'Enabled' if config.anti_detection.enable_random_delays else 'Disabled'}")
            logger.debug(f"🔧 User agents count: {len(config.chrome.user_agents) if config.chrome.user_agents else 0}")
            logger.debug(f"🔧 Session rotation interval: {config.anti_detection.session_rotation_interval}")
            logger.info("🛑 Press Ctrl+C to stop\n")
            
            # Initialize the driver
            logger.debug("🔧 Setting up ChromeDriver...")
            self.driver_manager.setup_driver()
            driver = self.driver_manager.get_driver()
            
            if driver is None:
                logger.error("❌ Failed to initialize driver")
                return
            
            logger.debug("✅ ChromeDriver initialized successfully")
            
            # Load the initial page asynchronously
            logger.info("🌐 Loading initial page asynchronously...")
            self._load_page_async(driver, config.monitoring.url)
            
            # Log detailed request/response information
            self.driver_manager.log_request_details()
            
            # Log page information
            try:
                current_url = driver.current_url
                page_title = driver.title
                logger.debug(f"📄 Current URL: {current_url}")
                logger.debug(f"📄 Page title: {page_title}")
            except Exception as e:
                logger.warning(f"⚠️  Could not get page info: {e}")
            

            
            logger.info("✅ Page loaded initially")
            
            # Main monitoring loop
            logger.debug("🔄 Starting main monitoring loop...")
            self._monitoring_loop(driver)
            
        except Exception as e:
            logger.error(f"❌ Fatal error: {e}")
            import traceback
            logger.debug(f"📋 Full traceback: {traceback.format_exc()}")
        finally:
            logger.debug("🛑 Cleaning up...")
            self.driver_manager.quit()
    
    def _monitoring_loop(self, driver):
        """Main monitoring loop with state management"""
        while self.running:
            try:
                logger.debug(f"🔄 Starting check #{self.check_count + 1} (State: {self.state.value})")
                if self.state == MonitorState.CAPTCHA_WAIT:
                    logger.info(f"🔐 CAPTCHA_WAIT: Check #{self.check_count + 1} - Waiting for manual captcha input...")
                    logger.info(f"🔐 CAPTCHA_WAIT: Current state confirmed: {self.state.value}")
                
                # Check if session should be rotated (only during monitoring, not during captcha wait)
                if self.state != MonitorState.CAPTCHA_WAIT and anti_detection.should_rotate_session():
                    logger.info("🔄 Rotating session for security...")
                    logger.debug(f"📊 Request count: {anti_detection.request_count}")
                    self.driver_manager.rotate_session()
                    driver = self.driver_manager.get_driver()
                    if driver is None:
                        logger.error("❌ Failed to get driver after rotation")
                        continue
                    logger.debug("🌐 Loading page after session rotation...")
                    driver.get(self.initial_page_url)
                    self.state = MonitorState.INITIAL
                
                # Page refresh (only if not waiting for captcha and not in available state)
                if driver is not None and self.state != MonitorState.CAPTCHA_WAIT and self.state != MonitorState.AVAILABLE:
                    logger.debug("🔄 Refreshing page...")
                    self._refresh_page_fast(driver)
                    
                    # Log request details after refresh
                    self.driver_manager.log_request_details()
                
                # Detect current page type
                if driver is not None:
                    page_info = page_detector.get_page_info(driver)
                    page_type = page_info["type"]
                    page_title = page_info.get('title', 'Unknown')
                    
                    # Check if CAPTCHA was completed (we're no longer on CAPTCHA page)
                    if self.state == MonitorState.CAPTCHA_WAIT and page_type != PageType.CAPTCHA:
                        logger.info(f"✅ [{timestamp}] CAPTCHA completed! Detected page change to: {page_type.value}")
                        logger.info("✅ Resuming normal monitoring...")
                        self.state = MonitorState.MONITORING
                        # Reset check count for better tracking after captcha
                        self.check_count = 0
                    
                    logger.info(f"📄 Page: {page_type.value} - '{page_title}'")
                    logger.info(f"🔄 Current state: {self.state.value}")
                    
                    self.check_count += 1
                    
                    timestamp = time_utils.get_timestamp()
                    
                    # Handle different page types based on current state
                    if page_type == PageType.BLOCKED:
                        logger.warning(f"🚫 [{timestamp}] BLOCKED! {page_info['description']}")
                        logger.warning(f"📋 Reason: {page_info.get('blocked_reason', 'Not specified')}")
                        
                        # Log detailed blocked page analysis
                        self.driver_manager.log_blocked_page_content()
                        
                        logger.info("⏳ Waiting before next attempt...")
                        logger.info("⏳ Waiting 30 seconds due to BLOCKED page...")
                        time.sleep(30)  # Wait longer if blocked
                        continue
                        
                    elif page_type == PageType.MAINTENANCE:
                        logger.warning(f"🔧 [{timestamp}] MAINTENANCE! {page_info['description']}")
                        logger.info("⏳ Waiting before next attempt...")
                        logger.info("⏳ Waiting 60 seconds due to MAINTENANCE...")
                        time.sleep(60)  # Wait longer if in maintenance
                        continue
                        
                    elif page_type == PageType.ERROR:
                        logger.error(f"❌ [{timestamp}] ERROR! {page_info['description']}")
                        logger.info("⏳ Waiting before next attempt...")
                        logger.info("⏳ Waiting 45 seconds due to ERROR...")
                        time.sleep(45)  # Wait longer if error
                        continue
                        
                    elif page_type == PageType.LOADING:
                        logger.info(f"⏳ [{timestamp}] Loading... {page_info['description']}")
                        logger.info("⏳ Waiting 5 seconds due to LOADING...")
                        time.sleep(5)  # Wait a bit more if loading
                        continue
                        
                    elif page_type == PageType.CAPTCHA:
                        if self.state != MonitorState.CAPTCHA_WAIT:
                            logger.warning(f"\n🔐 [{timestamp}] CAPTCHA DETECTED! (Check #{self.check_count})")
                            logger.warning(f"📝 {page_info['description']}")
                            logger.info("🔐 Action: Stopping refresh, waiting for manual captcha input...")
                            
                            # Try to extract captcha image info
                            self._check_captcha_image(driver)
                            
                            # Sound and visual notification (custom captcha sound)
                            notification_utils.play_sound(1, "captcha")
                            notification_utils.show_notification(
                                "RDV Monitor - CAPTCHA", 
                                "Manual intervention required! Type the captcha."
                            )
                            
                            self.state = MonitorState.CAPTCHA_WAIT
                            logger.info("🔐 Type the captcha manually - system will detect when completed...")
                        else:
                            logger.info(f"⏳ [{timestamp}] CAPTCHA_WAIT: Still waiting for captcha completion... (Check #{self.check_count})")
                        
                        continue
                        
                    elif page_type == PageType.INITIAL:
                        logger.info(f"🏠 [{timestamp}] Back to initial page - need to navigate again")
                        logger.info("🔘 Action: Attempting to click 'Prendre un rendez-vous' button...")
                        if self._click_prendre_rdv_button(driver):
                            self.state = MonitorState.NAVIGATING
                            logger.info("🔘 Successfully clicked 'Prendre un rendez-vous'")
                        else:
                            logger.warning("⚠️  Could not find 'Prendre un rendez-vous' button")
                            logger.info("🔄 Will retry on next check...")
                        
                        continue
                        
                    elif page_type == PageType.AVAILABLE:
                        if self.state == MonitorState.MONITORING:
                            logger.info(f"\n🎉 [{timestamp}] AVAILABLE SLOTS! (Check #{self.check_count})")
                            logger.info(f"📝 Details: {page_info['description']}")
                            
                            # Sound and visual notification (3x for availability)
                            notification_utils.play_sound(3, "availability")
                            notification_utils.show_notification(
                                "RDV Monitor - AVAILABLE SLOTS!", 
                                "Open the browser to schedule!"
                            )
                            
                            # Show availability details
                            availability_details = page_info.get('availability_details', {})
                            if availability_details.get('buttons'):
                                logger.info(f"🔘 Buttons: {', '.join(availability_details['buttons'])}")
                            if availability_details.get('links'):
                                logger.info(f"🔗 Links: {', '.join(availability_details['links'])}")
                            
                            logger.info("🔗 Open the browser manually to schedule!")
                            logger.info("🔊 Sound will continue playing every 30 seconds until you stop the monitor...")
                            
                            self.state = MonitorState.AVAILABLE
                        elif self.state == MonitorState.AVAILABLE:
                            # Continue playing sound periodically while in available state
                            logger.info(f"🔊 [{timestamp}] Reminder: Slots are still available! (Check #{self.check_count})")
                            notification_utils.play_sound(3, "availability")
                            
                            # Check if we're still on the appointment page and slots are still available
                            if "choisissez votre créneau" in page_title.lower():
                                is_available, details = self._check_availability(driver)
                                if not is_available:
                                    logger.info(f"📄 [{timestamp}] Slots are no longer available, resuming normal monitoring...")
                                    self.state = MonitorState.MONITORING
                        else:
                            logger.info(f"🎉 [{timestamp}] Available slots detected but not in monitoring state")
                        
                    elif page_type == PageType.UNAVAILABLE:
                        if self.state == MonitorState.MONITORING:
                            # Check if this is the appointment page and look for available slots
                            if "choisissez votre créneau" in page_title.lower():
                                logger.info(f"📄 [{timestamp}] Appointment page detected - checking for available slots...")
                                
                                # Check for available slots
                                is_available, details = self._check_availability(driver)
                                if is_available:
                                    logger.info(f"🎉 [{timestamp}] AVAILABLE SLOTS FOUND! (Check #{self.check_count})")
                                    logger.info(f"📝 Details: {details}")
                                    
                                    # Sound and visual notification (3x for availability)
                                    notification_utils.play_sound(3, "availability")
                                    notification_utils.show_notification(
                                        "RDV Monitor - AVAILABLE SLOTS!", 
                                        "Open the browser to schedule!"
                                    )
                                    
                                    logger.info("🔗 Open the browser manually to schedule!")
                                    logger.info("🔊 Sound will continue playing every 30 seconds until you stop the monitor...")
                                    
                                    self.state = MonitorState.AVAILABLE
                                else:
                                    if config.logging.show_check_count:
                                        logger.info(f"[{timestamp}] Check #{self.check_count} - No available slots")
                                    else:
                                        logger.info(f"[{timestamp}] No available slots")
                            else:
                                # Regular unavailable page
                                if config.logging.show_check_count:
                                    logger.info(f"[{timestamp}] Check #{self.check_count} - {page_info['description']}")
                                else:
                                    logger.info(f"[{timestamp}] {page_info['description']}")
                        elif self.state == MonitorState.NAVIGATING:
                            logger.info(f"📄 [{timestamp}] Navigated to appointment page - {page_info['description']}")
                            logger.info("✅ Action: Transitioning to monitoring state...")
                            self.state = MonitorState.MONITORING
                            logger.info("✅ Starting availability monitoring...")
                        else:
                            logger.info(f"📄 [{timestamp}] {page_info['description']}")
                                
                    else:  # UNKNOWN or others
                        logger.warning(f"❓ [{timestamp}] Unknown page: {page_info['description']}")
                        logger.info(f"📄 Title: {page_info['title']}")
                        logger.info(f"🔗 URL: {page_info['url']}")
                
                # Delay before next check
                if self.state == MonitorState.CAPTCHA_WAIT:
                    logger.info("⏳ CAPTCHA_WAIT: Short delay (1s) while waiting for manual captcha input...")
                    time.sleep(1)  # Short delay when waiting for captcha
                    logger.info("✅ CAPTCHA_WAIT: Delay completed, checking again...")
                elif self.state == MonitorState.AVAILABLE:
                    logger.info("⏳ Short delay (30s) while slots are available...")
                    time.sleep(30)  # Shorter delay when slots are available
                else:
                    # Normal delay for monitoring
                    self._smart_delay()
                
            except Exception as e:
                logger.error(f"❌ Error during monitoring: {e}")
                if self.state != MonitorState.CAPTCHA_WAIT:
                    self._smart_delay()
    

    
    def _check_availability(self, driver) -> Tuple[bool, str]:
        """Checks if there are available slots on the page"""
        try:
            if driver is None:
                return False, "Driver not available"
                
            page_text = driver.page_source.lower()
            
            # NOVA LÓGICA: Se encontrar "aucun créneau disponible", não há agenda
            if "aucun créneau disponible" in page_text:
                return False, "Aucun créneau disponible found - no slots available"
            
            # Se não encontrou "aucun créneau disponible", significa que há agenda disponível
            return True, "No 'Aucun créneau disponible' found - slots are available"
            
        except Exception as e:
            logger.error(f"❌ Error checking availability: {e}")
            return False, f"Error: {e}"
    
    def _smart_delay(self):
        """Implements intelligent delay with anti-detection"""
        if config.anti_detection.enable_random_delays:
            delay = anti_detection.get_random_delay()
            logger.info(f"⏳ Random delay: {delay:.1f} seconds")
            time.sleep(delay)
        else:
            logger.info(f"⏳ Fixed delay: {config.monitoring.base_interval} seconds")
            time.sleep(config.monitoring.base_interval)
    
    def _check_captcha_image(self, driver) -> None:
        """Checks and extracts captcha image information"""
        try:
            logger.info("🔍 Checking captcha image...")
            
            # Look for captcha elements
            captcha_elements = driver.find_elements(By.CSS_SELECTOR, ".captcha img")
            if captcha_elements:
                logger.info(f"🔍 Found {len(captcha_elements)} captcha image(s)")
                
                for i, img in enumerate(captcha_elements):
                    try:
                        src = img.get_attribute("src")
                        if src:
                            if src.startswith("data:image"):
                                logger.info(f"🔍 Captcha image {i+1}: Base64 image found (length: {len(src)} chars)")
                                # Extract just the beginning to see if it's valid
                                if len(src) > 100:
                                    logger.info(f"🔍 Base64 starts with: {src[:100]}...")
                                else:
                                    logger.warning(f"⚠️  Base64 seems too short: {src}")
                            else:
                                logger.info(f"🔍 Captcha image {i+1}: URL image - {src}")
                        else:
                            logger.warning(f"⚠️  Captcha image {i+1}: No src attribute")
                    except Exception as e:
                        logger.warning(f"⚠️  Error checking captcha image {i+1}: {e}")
            else:
                logger.warning("⚠️  No captcha images found with .captcha img selector")
                
                # Try alternative selectors
                alt_selectors = ["img[src*='captcha']", "img[src*='data:image']", ".captcha", "img"]
                for selector in alt_selectors:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        logger.info(f"🔍 Found {len(elements)} elements with selector '{selector}'")
                        for elem in elements[:3]:  # Check first 3
                            try:
                                src = elem.get_attribute("src")
                                if src and "data:image" in src:
                                    logger.info(f"🔍 Found base64 image with selector '{selector}': {src[:50]}...")
                            except:
                                continue
                        break
                        
        except Exception as e:
            logger.error(f"❌ Error checking captcha image: {e}")
    
    def _click_prendre_rdv_button(self, driver) -> bool:
        """Tries to click the 'Prendre un rendez-vous' button"""
        try:
            logger.info("🔍 Looking for 'Prendre un rendez-vous' button...")
            
            # Specific selectors for the exact button
            specific_selectors = [
                "a[href='/rdvpref/reservation/demarche/3720/cgu/']",
                "a.bg-primary[href*='cgu']",
                "a.q-btn[href*='cgu']",
                "a[href*='cgu']"
            ]
            
            # Try specific selectors first
            for selector in specific_selectors:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                for element in elements:
                    element_text = element.text.lower().strip()
                    if "prendre un rendez-vous" in element_text:
                        logger.info(f"🔘 Found specific button: '{element.text}' with selector: {selector}")
                        
                        # Scroll to element
                        driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        logger.info("⏳ Waiting 0.5 seconds after scrolling to element...")
                        time.sleep(0.5)
                        
                        # Click the element
                        logger.info("🔘 Attempting to click...")
                        element.click()
                        logger.info("⏳ Waiting 3 seconds after clicking...")
                        time.sleep(3)  # Wait for navigation
                        
                        logger.info("✅ Button clicked successfully")
                        return True
            
            # Fallback to general search
            logger.info("🔍 Specific button not found, trying general search...")
            
            # Get all clickable elements
            all_elements = []
            
            # Try different selectors for the button
            selectors = [
                "a[href*='prendre']",
                "a[href*='rdv']", 
                "a[href*='rendez-vous']",
                "button[onclick*='prendre']",
                "button[onclick*='rdv']",
                "a",
                "button",
                "input[type='submit']",
                "input[type='button']"
            ]
            
            for selector in selectors:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                all_elements.extend(elements)
                logger.info(f"🔍 Found {len(elements)} elements with selector: {selector}")
            
            # Remove duplicates
            unique_elements = []
            seen_texts = set()
            for element in all_elements:
                try:
                    element_text = element.text.lower().strip()
                    if element_text and element_text not in seen_texts:
                        unique_elements.append(element)
                        seen_texts.add(element_text)
                except:
                    continue
            
            logger.info(f"🔍 Total unique elements found: {len(unique_elements)}")
            
            # Log all element texts for debugging
            for i, element in enumerate(unique_elements[:10]):  # Log first 10
                try:
                    text = element.text.strip()
                    if text:
                        logger.info(f"🔍 Element {i+1}: '{text}'")
                except:
                    continue
            
            # Look for the button
            for element in unique_elements:
                try:
                    element_text = element.text.lower().strip()
                    if any(keyword in element_text for keyword in [
                        "prendre un rendez-vous",
                        "prendre rendez-vous", 
                        "prendre rdv",
                        "prendre un rdv",
                        "rendez-vous",
                        "rdv"
                    ]):
                        logger.info(f"🔘 Found button: '{element.text}'")
                        
                        # Scroll to element
                        driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        logger.info("⏳ Waiting 0.5 seconds after scrolling to element...")
                        time.sleep(0.5)
                        
                        # Click the element
                        logger.info("🔘 Attempting to click...")
                        element.click()
                        logger.info("⏳ Waiting 3 seconds after clicking...")
                        time.sleep(3)  # Wait for navigation
                        
                        logger.info("✅ Button clicked successfully")
                        return True
                except Exception as e:
                    logger.warning(f"⚠️  Error with element '{element.text}': {e}")
                    continue
            
            logger.warning("❌ 'Prendre un rendez-vous' button not found")
            return False
            
        except Exception as e:
            logger.error(f"❌ Error clicking 'Prendre un rendez-vous' button: {e}")
            return False
    
    def get_stats(self) -> dict:
        """Returns monitoring statistics"""
        uptime = time.time() - self.start_time
        return {
            "check_count": self.check_count,
            "uptime": time_utils.format_duration(uptime),
            "checks_per_minute": self.check_count / (uptime / 60) if uptime > 0 else 0,
            "current_state": self.state.value
        } 

    def _load_page_async(self, driver, url: str) -> None:
        """Loads a page asynchronously and waits for essential elements."""
        try:
            logger.info(f"🌐 Loading page asynchronously: {url}")
            
            # Define conditions to check for
            def check_page_loaded():
                try:
                    # Check if page has basic structure
                    return driver.execute_script("return document.readyState") in ["interactive", "complete"]
                except:
                    return False
            
            def check_captcha_available():
                try:
                    # Check if captcha image is available
                    captcha_selectors = [
                        "img[src*='captcha']",
                        "img[alt*='captcha']",
                        "img[class*='captcha']",
                        "img[id*='captcha']",
                        ".captcha img",
                        "#captcha img"
                    ]
                    for selector in captcha_selectors:
                        elements = driver.find_elements(By.CSS_SELECTOR, selector)
                        if elements:
                            return True
                    return False
                except:
                    return False
            
            # Load page first
            driver.get(url)
            logger.info("🚀 Page load started")
            
            # Then wait for conditions
            success = self.driver_manager.wait_for_conditions_async(
                check_conditions=[check_page_loaded, check_captcha_available],
                max_wait=10,
                check_interval=0.5
            )
            
            if success:
                logger.info("✅ Page loaded asynchronously with essential elements")
            else:
                logger.warning("⚠️  Page loaded but some elements may not be ready")
                
        except TimeoutException:
            logger.info(f"⏰ Async page load timeout for {url} - this is normal, continuing with monitoring...")
            # Don't treat timeout as an error - it's expected behavior
            # The page might still be partially loaded and usable
        except Exception as e:
            logger.error(f"❌ Failed to load page {url} asynchronously: {e}")
            import traceback
            logger.debug(f"📋 Async page load traceback: {traceback.format_exc()}")

    def _refresh_page_fast(self, driver) -> None:
        """Refreshes the current page without using driver.get()"""
        try:
            logger.debug("🔄 Refreshing current page...")
            
            # Use JavaScript to refresh the page (more efficient than driver.get())
            driver.execute_script("location.reload();")
            logger.debug("✅ Page refresh initiated")
            
            # Small wait for the refresh to start
            time.sleep(1)
            
        except Exception as e:
            logger.warning(f"⚠️  Error refreshing page: {e}")
            # Fallback to driver.get() if JavaScript refresh fails
            try:
                current_url = driver.current_url
                logger.debug(f"🔄 Fallback: Using driver.get() for {current_url}")
                driver.get(current_url)
            except Exception as fallback_error:
                logger.error(f"❌ Failed to refresh page: {fallback_error}")

    def _load_page_fast(self, driver, url: str) -> None:
        """Loads a page without waiting for full page load."""
        try:
            logger.info(f"🌐 Loading page: {url} (fast mode)")
            
            # Set a very short page load timeout for this specific load
            original_timeout = driver.timeouts.page_load
            driver.set_page_load_timeout(5)  # 5 seconds max
            
            try:
                driver.get(url)
                logger.info("✅ Page loaded (fast mode)")
            except TimeoutException:
                logger.info(f"⏰ Fast page load timeout for {url} - this is expected, continuing...")
                # Continue anyway - the page might be partially loaded
            except Exception as e:
                logger.warning(f"⚠️  Unexpected error in fast page load: {e}")
                # Continue anyway - the page might be partially loaded
            finally:
                # Restore original timeout
                driver.set_page_load_timeout(original_timeout)
                
        except Exception as e:
            logger.error(f"❌ Failed to load page {url} (fast mode): {e}")
            import traceback
            logger.debug(f"📋 Fast page load traceback: {traceback.format_exc()}") 